name: "Nuclei Top 10 Scanner"

on:
  workflow_dispatch:
    inputs:
      target_name:
        description: 'Name of target folder in storage repo'
        required: true
      storage_repo:
        description: 'SSH URL of scan-results-storage repo'
        required: true
      custom_cookie:
        description: 'Optional: Custom Cookie header'
        required: false
        default: ''
      custom_header:
        description: 'Optional: Custom extra header'
        required: false
        default: ''

jobs:
  fetch-results:
    runs-on: ubuntu-latest
    outputs:
      urls_exist: ${{ steps.check_files.outputs.urls_exist }}
    steps:
      - name: Setup SSH and Git
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          mkdir -p ~/.ssh/
          echo "${DEPLOY_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
      - name: Clone storage repo and copy files
        run: |
          git clone ${{ github.event.inputs.storage_repo }} storage
          mkdir -p combined-results
          cp storage/${{ github.event.inputs.target_name }}/discovery/live-urls.txt combined-results/ 2>/dev/null || echo "No live-urls.txt file found"
      - name: Check if files exist
        id: check_files
        run: |
          if [[ -s "combined-results/live-urls.txt" ]]; then
            echo "urls_exist=true" >> $GITHUB_OUTPUT
          else
            echo "urls_exist=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload combined results artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-top10-combined-results-artifact
          path: combined-results/

  generate-matrix:
    runs-on: ubuntu-latest
    needs: fetch-results
    if: "needs.fetch-results.outputs.urls_exist == 'true'"
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuclei-top10-combined-results-artifact
          path: combined-results/
      - name: Generate Matrix
        id: generate-matrix
        run: |
          echo "--- STARTING MATRIX GENERATION FOR NUCLEI ---"
          URL_FILE="combined-results/live-urls.txt"

          if [ ! -s "$URL_FILE" ]; then
            echo "URL file does not exist or is empty. Exiting."
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 0
          fi

          LINES_PER_CHUNK=200
          MAX_JOBS=256
          MAX_LINES=$((MAX_JOBS * LINES_PER_CHUNK))

          TOTAL_LINES=$(wc -l < "$URL_FILE")

          echo "LINES_PER_CHUNK: $LINES_PER_CHUNK"
          echo "MAX_JOBS: $MAX_JOBS"
          echo "MAX_LINES: $MAX_LINES"
          echo "TOTAL_LINES: $TOTAL_LINES"

          if [ "$TOTAL_LINES" -gt "$MAX_LINES" ]; then
            echo "Truncating file..."
            head -n "$MAX_LINES" "$URL_FILE" > "${URL_FILE}.tmp" && mv "${URL_FILE}.tmp" "$URL_FILE"
            TOTAL_LINES=$(wc -l < "$URL_FILE") # Recalculate after truncation
            echo "NEW_TOTAL_LINES: $TOTAL_LINES"
          else
            echo "No truncation needed."
          fi

          CHUNKS=$(( (TOTAL_LINES + LINES_PER_CHUNK - 1) / LINES_PER_CHUNK ))
          echo "CALCULATED_CHUNKS: $CHUNKS"

          MATRIX='{"include":['
          IS_FIRST_ITEM=true
          for i in $(seq 1 $CHUNKS); do
            if [ "$IS_FIRST_ITEM" = true ]; then
              IS_FIRST_ITEM=false
            else
              MATRIX="$MATRIX,"
            fi
            MATRIX="$MATRIX{\"chunk\":$i}"
          done
          MATRIX="$MATRIX]}"
          echo "Final matrix object will have $CHUNKS chunks."
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "--- FINISHED MATRIX GENERATION ---"

  nuclei-scan:
    needs: [fetch-results, generate-matrix]
    if: "needs.fetch-results.outputs.urls_exist == 'true'"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuclei-top10-combined-results-artifact
          path: combined-results/
      - name: Install Nuclei
        run: |
          go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Generate URL chunk file
        run: |
          if [ -s combined-results/live-urls.txt ]; then
            LINES_PER_CHUNK=200
            START_LINE=$((((${{ matrix.chunk }} - 1) * LINES_PER_CHUNK) + 1))
            END_LINE=$((${{ matrix.chunk }} * LINES_PER_CHUNK))
            sed -n "${START_LINE},${END_LINE}p" combined-results/live-urls.txt > nuclei-chunk-${{ matrix.chunk }}.txt
          else
            touch nuclei-chunk-${{ matrix.chunk }}.txt
          fi
      - name: Run Nuclei Scan on Chunk
        run: |
          set -e
          INPUT_FILE="nuclei-chunk-${{ matrix.chunk }}.txt"
          OUTPUT_FILE="nuclei-output-${{ matrix.chunk }}.txt"

          if [ ! -s "$INPUT_FILE" ]; then
            echo "URL chunk file is empty, skipping Nuclei scan for this chunk."
            touch "$OUTPUT_FILE"
            exit 0
          fi

          # Build header arguments
          HEADER_ARGS=()
          if [[ -n "${{ github.event.inputs.custom_cookie }}" ]]; then
            HEADER_ARGS+=(-H "Cookie: ${{ github.event.inputs.custom_cookie }}")
          fi
          if [[ -n "${{ github.event.inputs.custom_header }}" ]]; then
            HEADER_ARGS+=(-H "${{ github.event.inputs.custom_header }}")
          fi

          # Run Nuclei with a robust set of tags for high-impact vulnerabilities
          nuclei -l "$INPUT_FILE" \
            -tags cve,critical,high,ssrf,sqli,lfi,rce \
            -o "$OUTPUT_FILE" \
            "${HEADER_ARGS[@]}"

      - name: Upload Nuclei results artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-top10-results-chunk-${{ matrix.chunk }}
          path: nuclei-output-${{ matrix.chunk }}.txt

  push-to-storage:
    needs: [nuclei-scan]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH and Git
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          mkdir -p ~/.ssh/
          echo "${DEPLOY_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: all-results
      - name: Push results to storage repo
        run: |
          git clone ${{ github.event.inputs.storage_repo }} storage
          mkdir -p storage/${{ github.event.inputs.target_name }}/nuclei-top10

          RESULTS_FILE="storage/${{ github.event.inputs.target_name }}/nuclei-top10/nuclei-top10.txt"

          # Consolidate all nuclei output into a single file
          find all-results -type f -name "nuclei-output-*.txt" -exec cat {} + > "$RESULTS_FILE"

          cd storage
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "Add Nuclei Top 10 scan results for ${{ github.event.inputs.target_name }}"
            git push
          else
            echo "No changes to commit"
          fi
